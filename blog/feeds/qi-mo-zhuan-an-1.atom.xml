<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>41223149網際內容管理系統 - 期末專案1</title><link href="./" rel="alternate"></link><link href="./feeds/qi-mo-zhuan-an-1.atom.xml" rel="self"></link><id>./</id><updated>2024-06-20T01:59:17+08:00</updated><entry><title>期末專案1</title><link href="./%E6%9C%9F%E6%9C%AB%E5%B0%88%E6%A1%881.html" rel="alternate"></link><published>2024-02-18T12:00:00+08:00</published><updated>2024-06-20T01:59:17+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./期末專案1.html</id><summary type="html">&lt;h1&gt;塔羅牌&lt;/h1&gt;
&lt;p&gt;首先，確保您有一組塔羅牌的圖像文件，把它們儲存在一個名為「tarot_cards」的資料夾中。&lt;/p&gt;
&lt;p&gt;pip install Pillow
接下來，可以使用以下Python代碼來創建一個簡單的塔羅牌應用程序&lt;/p&gt;
&lt;p&gt;import os …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;塔羅牌&lt;/h1&gt;
&lt;p&gt;首先，確保您有一組塔羅牌的圖像文件，把它們儲存在一個名為「tarot_cards」的資料夾中。&lt;/p&gt;
&lt;p&gt;pip install Pillow
接下來，可以使用以下Python代碼來創建一個簡單的塔羅牌應用程序&lt;/p&gt;
&lt;p&gt;import os
import random
from PIL import Image&lt;/p&gt;
&lt;h1&gt;塔羅牌圖像文件夾&lt;/h1&gt;
&lt;p&gt;TAROT_FOLDER = "tarot_cards"&lt;/p&gt;
&lt;h1&gt;獲取所有塔羅牌圖像的文件名&lt;/h1&gt;
&lt;p&gt;tarot_cards = os.listdir(TAROT_FOLDER)&lt;/p&gt;
&lt;h1&gt;隨機選擇一張塔羅牌&lt;/h1&gt;
&lt;p&gt;selected_card = random.choice(tarot_cards)&lt;/p&gt;
&lt;h1&gt;打印所選塔羅牌的名稱&lt;/h1&gt;
&lt;p&gt;print("你的塔羅牌是：" + selected_card)&lt;/p&gt;
&lt;h1&gt;顯示所選塔羅牌的圖像&lt;/h1&gt;
&lt;p&gt;image_path = os.path.join(TAROT_FOLDER, selected_card)
image = Image.open(image_path)
image.show()&lt;/p&gt;
&lt;p&gt;這個代碼將隨機選擇一張塔羅牌，並顯示其圖像。並請確保您有一個名為"tarot_cards"的文件夾，其中包含塔羅牌圖像。&lt;/p&gt;
&lt;h1&gt;德州撲克&lt;/h1&gt;
&lt;p&gt;import random&lt;/p&gt;
&lt;h1&gt;定義撲克牌的花色和點數&lt;/h1&gt;
&lt;p&gt;suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
ranks = ['Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace']&lt;/p&gt;
&lt;h1&gt;初始化一副撲克牌&lt;/h1&gt;
&lt;p&gt;deck = [{'rank': rank, 'suit': suit} for rank in ranks for suit in suits]&lt;/p&gt;
&lt;h1&gt;洗牌&lt;/h1&gt;
&lt;p&gt;random.shuffle(deck)&lt;/p&gt;
&lt;h1&gt;發兩張牌給玩家和莊家&lt;/h1&gt;
&lt;p&gt;player_hand = [deck.pop(), deck.pop()]
dealer_hand = [deck.pop(), deck.pop()]&lt;/p&gt;
&lt;h1&gt;顯示玩家的牌和一張莊家的牌&lt;/h1&gt;
&lt;p&gt;print(f'玩家的牌: {player_hand[0]["rank"]} of {player_hand[0]["suit"]} 和 {player_hand[1]["rank"]} of {player_hand[1]["suit"]}')
print(f'莊家的牌: {dealer_hand[0]["rank"]} of {dealer_hand[0]["suit"]} 和 一張未知牌')&lt;/p&gt;
&lt;h1&gt;檢查是否有玩家或莊家已經有21點（Blackjack）&lt;/h1&gt;
&lt;p&gt;def blackjack(hand):
    values = [card_value(card) for card in hand]
    return sum(values) == 21&lt;/p&gt;
&lt;h1&gt;計算牌的點數&lt;/h1&gt;
&lt;p&gt;def card_value(card):
    if card['rank'] in ['Jack', 'Queen', 'King']:
        return 10
    elif card['rank'] == 'Ace':
        return 11
    else:
        return int(card['rank'])&lt;/p&gt;
&lt;h1&gt;主遊戲迴圈&lt;/h1&gt;
&lt;p&gt;while True:
    # 檢查是否有玩家或莊家已經有21點
    if blackjack(player_hand) or blackjack(dealer_hand):
        break&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gh"&gt;#&lt;/span&gt; 玩家選擇要加牌還是停止
action = input(&amp;#39;要加牌嗎？（加牌/停止）: &amp;#39;)
if action.lower() == &amp;#39;加牌&amp;#39;:
    player_hand.append(deck.pop())
    print(f&amp;#39;你的牌: {&amp;quot;, &amp;quot;.join([card[&amp;quot;rank&amp;quot;] + &amp;quot; of &amp;quot; + card[&amp;quot;suit&amp;quot;] for card in player_hand])}&amp;#39;)
else:
    break
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;莊家加牌直到達到17點或更高&lt;/h1&gt;
&lt;p&gt;while sum([card_value(card) for card in dealer_hand]) &amp;lt; 17:
    dealer_hand.append(deck.pop())&lt;/p&gt;
&lt;h1&gt;顯示最終結果&lt;/h1&gt;
&lt;p&gt;print(f'你的牌: {", ".join([card["rank"] + " of " + card["suit"] for card in player_hand])}')
print(f'你的點數: {sum([card_value(card) for card in player_hand])}')
print(f'莊家的牌: {", ".join([card["rank"] + " of " + card["suit"] for card in dealer_hand])}')
print(f'莊家的點數: {sum([card_value(card) for card in dealer_hand])}')&lt;/p&gt;
&lt;h1&gt;判斷贏家&lt;/h1&gt;
&lt;p&gt;if sum([card_value(card) for card in player_hand]) &amp;gt; 21:
    print('你爆牌了，莊家贏了！')
elif sum([card_value(card) for card in dealer_hand]) &amp;gt; 21:
    print('莊家爆牌了，你贏了！')
elif sum([card_value(card) for card in player_hand]) &amp;gt; sum([card_value(card) for card in dealer_hand]):
    print('你贏了！')
elif sum([card_value(card) for card in player_hand]) &amp;lt; sum([card_value(card) for card in dealer_hand]):
    print('莊家贏了！')
else:
    print('平局！')
在執行上面的代碼後，你將開始一個簡單的德州撲克遊戲。遊戲的進行方式如下：&lt;/p&gt;
&lt;p&gt;執行代碼：在你的 Python 開發環境中運行上面提供的代碼。這樣你就會看到一副洗好的撲克牌和玩家、莊家的初始牌。&lt;/p&gt;
&lt;p&gt;玩家回合：遊戲將提示你進行選擇。你可以輸入"加牌"以繼續要求加牌，或者輸入"停止"以結束你的回合。&lt;/p&gt;
&lt;p&gt;莊家回合：當你選擇"停止"或者當你的牌總和達到21點時，莊家將開始自己的回合，自動加牌直到達到17點或更高。&lt;/p&gt;
&lt;p&gt;結算：遊戲將計算玩家和莊家的點數，並確定勝利者。結果將被輸出到屏幕上，以宣布遊戲的結果。&lt;/p&gt;
&lt;h1&gt;西洋棋&lt;/h1&gt;
&lt;p&gt;def create_board():
    board = [
        ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],
        ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
        ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']
    ]
    return board&lt;/p&gt;
&lt;p&gt;def print_board(board):
    def colored_piece(piece):
        if piece.islower():
            return f"\033[94m{piece.upper()}\033[0m"  # Dark blue for black pieces
        elif piece.isupper():
            return f"\033[96m{piece}\033[0m"  # Cyan for white pieces
        return piece&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;  a b c d e f g h&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colored_piece&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;def is_valid_move(board, start, end, player, en_passant):
    start_row, start_col = start
    end_row, end_col = end
    piece = board[start_row][start_col]&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;if player == &amp;#39;White&amp;#39; and piece.islower():
    return False
if player == &amp;#39;Black&amp;#39; and piece.isupper():
    return False

if piece.lower() == &amp;#39;p&amp;#39;:
    return is_valid_move_pawn(board, start, end, en_passant)
elif piece.lower() == &amp;#39;r&amp;#39;:
    return is_valid_move_rook(board, start, end)
elif piece.lower() == &amp;#39;n&amp;#39;:
    return is_valid_move_knight(board, start, end)
elif piece.lower() == &amp;#39;b&amp;#39;:
    return is_valid_move_bishop(board, start, end)
elif piece.lower() == &amp;#39;q&amp;#39;:
    return is_valid_move_queen(board, start, end)
elif piece.lower() == &amp;#39;k&amp;#39;:
    return is_valid_move_king(board, start, end)
return False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;def is_valid_move_pawn(board, start, end, en_passant):
    start_row, start_col = start
    end_row, end_col = end
    piece = board[start_row][start_col]&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isupper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;start_row_base&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isupper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end_row&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;end_col&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start_col&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;end_col&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end_row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start_row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;True&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start_row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start_row_base&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end_row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start_row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_row + direction&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;start_col&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;True&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start_col&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;en_passant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end_row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start_row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_col&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end_col&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_col&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end_col&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end_row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start_row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;def is_valid_move_rook(board, start, end):
    start_row, start_col = start
    end_row, end_col = end
    if start_row != end_row and start_col != end_col:
        return False
    step_row = (end_row - start_row) // max(1, abs(end_row - start_row)) if start_row != end_row else 0
    step_col = (end_col - start_col) // max(1, abs(end_col - start_col)) if start_col != end_col else 0
    for i in range(1, max(abs(end_row - start_row), abs(end_col - start_col))):
        if board[start_row + i * step_row][start_col + i * step_col] != ' ':
            return False
    return True&lt;/p&gt;
&lt;p&gt;def is_valid_move_knight(board, start, end):
    start_row, start_col = start
    end_row, end_col = end
    return (abs(start_row - end_row), abs(start_col - end_col)) in [(1, 2), (2, 1)]&lt;/p&gt;
&lt;p&gt;def is_valid_move_bishop(board, start, end):
    start_row, start_col = start
    end_row, end_col = end
    if abs(start_row - end_row) != abs(start_col - end_col):
        return False
    step_row = (end_row - start_row) // abs(end_row - start_row)
    step_col = (end_col - start_col) // abs(end_col - start_col)
    for i in range(1, abs(end_row - start_row)):
        if board[start_row + i * step_row][start_col + i * step_col] != ' ':
            return False
    return True&lt;/p&gt;
&lt;p&gt;def is_valid_move_queen(board, start, end):
    return is_valid_move_rook(board, start, end) or is_valid_move_bishop(board, start, end)&lt;/p&gt;
&lt;p&gt;def is_valid_move_king(board, start, end):
    start_row, start_col = start
    end_row, end_col = end
    return max(abs(start_row - end_row), abs(start_col - end_col)) == 1&lt;/p&gt;
&lt;p&gt;def move_piece(board, start, end, player, en_passant):
    if not is_valid_move(board, start, end, player, en_passant):
        print("无效的移动!")
        return en_passant
    start_row, start_col = start
    end_row, end_col = end&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;处理过路兵&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_row&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;start_col&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start_col&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;en_passant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_col&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end_col&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;White&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end_row + 1&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;end_col&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end_row - 1&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;end_col&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end_row&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;end_col&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_row&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;start_col&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_row&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;start_col&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;处理升变&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end_row&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;end_col&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;White&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end_row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Black&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end_row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;True&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;promotion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;选择升变的棋子 (Q/R/B/N): &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;promotion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;QRBN&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end_row&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;end_col&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;promotion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;White&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;promotion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;返回新的过路兵位置&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;end_row&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;end_col&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end_row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end_row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end_col&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;def parse_position(position):
    if len(position) != 2:
        raise ValueError("位置格式不正确，请输入类似 'e2' 的格式。")
    col, row = position
    if col not in "abcdefgh" or row not in "12345678":
        raise ValueError("位置格式不正确，请输入类似 'e2' 的格式。")
    col = ord(col) - ord("a")
    row = 8 - int(row)
    return (row, col)&lt;/p&gt;
&lt;p&gt;def game_instructions():
    print("欢迎来到西洋棋游戏!")
    print("游戏规则说明:")
    print("1. 两位玩家轮流进行游戏，白方先行。")
    print("2. 使用棋盘上的位置来移动棋子，例如 'e2' 移动到 'e4'。")
    print("3. 黑色棋子为深蓝色，白色棋子为水蓝色。")
    print("4. 特殊规则：兵的升变、过路兵、易位、将军、将死等。")
    print("请享受游戏!\n")&lt;/p&gt;
&lt;p&gt;def play_chess():
    game_instructions()
    board = create_board()
    current_player = "White"
    en_passant = None&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;while True:
    print_board(board)
    print(f&amp;quot;{current_player} 的回合&amp;quot;)
    while True:
        try:
            start = input(&amp;quot;输入起始位置 (例如 e2): &amp;quot;)
            start_pos = parse_position(start)
            break
        except ValueError as e:
            print(e)

    while True:
        try:
            end = input(&amp;quot;输入结束位置 (例如 e4): &amp;quot;)
            end_pos = parse_position(end)
            break
        except ValueError as e:
            print(e)

    en_passant = move_piece(board, start_pos, end_pos, current_player, en_passant)
    current_player = &amp;quot;Black&amp;quot; if current_player == &amp;quot;White&amp;quot; else &amp;quot;White&amp;quot;
    if input(&amp;quot;是否结束游戏？ (y/n): &amp;quot;).lower() == &amp;quot;y&amp;quot;:
        break
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
    play_chess()
這是一款文字版的西洋棋遊戲，具有以下特點：&lt;/p&gt;
&lt;p&gt;雙人遊戲：兩位玩家輪流操作，白方先行。
文字介面：玩家輸入棋子位置來移動棋子。
棋盤顯示：棋盤以表格形式顯示，黑方棋子為深藍色，白方棋子為水藍色。
特殊規則：包括兵的升變、過路兵、易位、將軍和將死等規則。
遊戲說明：玩家輸入起始和結束位置來移動棋子，例如 "e2 e4"。
系統檢查移動是否合法，合法則更新棋盤，不合法則提示重新輸入。
特殊移動如兵的升變和易位會自動處理。
隨時輸入 "y" 結束遊戲。&lt;/p&gt;
&lt;h1&gt;五子棋&lt;/h1&gt;
&lt;p&gt;def initialize_board(size=15):
    return [[' ' for _ in range(size)] for _ in range(size)]&lt;/p&gt;
&lt;p&gt;def colored_piece(piece):
    if piece == 'X':
        return f"\033[91m{piece}\033[0m"  # Red
    elif piece == 'O':
        return f"\033[92m{piece}\033[0m"  # Green
    return piece&lt;/p&gt;
&lt;p&gt;def print_board(board):
    size = len(board)
    # Print the top column numbers
    print("    " + " ".join(f"{i+1:2}" for i in range(size)))
    print("  +" + "---+" * size)
    for idx, row in enumerate(board):
        print(f"{idx+1:2} | " + " | ".join(colored_piece(cell) for cell in row) + " |")
        print("  +" + "---+" * size)&lt;/p&gt;
&lt;p&gt;def check_winner(board, player):
    size = len(board)
    # Check horizontal, vertical, and diagonal lines
    for row in range(size):
        for col in range(size):
            if board[row][col] == player:
                # Check horizontal
                if col + 4 &amp;lt; size and all(board[row][col+i] == player for i in range(5)):
                    return True
                # Check vertical
                if row + 4 &amp;lt; size and all(board[row+i][col] == player for i in range(5)):
                    return True
                # Check diagonal (down-right)
                if row + 4 &amp;lt; size and col + 4 &amp;lt; size and all(board[row+i][col+i] == player for i in range(5)):
                    return True
                # Check diagonal (down-left)
                if row + 4 &amp;lt; size and col - 4 &amp;gt;= 0 and all(board[row+i][col-i] == player for i in range(5)):
                    return True
    return False&lt;/p&gt;
&lt;p&gt;def play_game():
    board = initialize_board()
    print("歡迎來到五子棋遊戲！")
    print("玩家1: 黑子 (X) \033[91m紅色\033[0m")
    print("玩家2: 白子 (O) \033[92m綠色\033[0m")
    current_player = 'X'  # X starts the game, representing black stones
    while True:
        print_board(board)
        print(f"玩家 {current_player} 的回合")
        try:
            row = int(input("請輸入行 (1-15): ")) - 1
            col = int(input("請輸入列 (1-15): ")) - 1
            if 0 &amp;lt;= row &amp;lt; len(board) and 0 &amp;lt;= col &amp;lt; len(board[0]) and board[row][col] == ' ':
                board[row][col] = current_player
                if check_winner(board, current_player):
                    print_board(board)
                    print(f"玩家 {current_player} 獲勝！")
                    break
                current_player = 'O' if current_player == 'X' else 'X'
            else:
                print("無效的移動，請重試。")
        except ValueError:
            print("請輸入有效的數字。")&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
    play_game()
這是一款文字版的五子棋遊戲，旨在提供玩家一個簡單且有趣的方式來享受五子棋的樂趣。以下是這款五子棋遊戲的主要特點和玩法說明：&lt;/p&gt;
&lt;h1&gt;遊戲特點&lt;/h1&gt;
&lt;p&gt;雙人遊戲：兩位玩家輪流下棋，輪流放置黑子（X）和白子（O）。
文字介面：玩家需要輸入棋子的位置來進行落子。
棋盤顯示：棋盤以表格形式顯示，每個位置用數字標示，方便玩家輸入。
簡單易用：遊戲規則簡單，適合所有年齡段的玩家。&lt;/p&gt;
&lt;h1&gt;遊戲玩法說明&lt;/h1&gt;
&lt;p&gt;遊戲開始：啟動遊戲後，系統會顯示初始空棋盤，並提示黑方玩家進行落子。
輸入落子位置：玩家需要輸入棋子的行和列，例如在第4行第5列落子，輸入格式為 "4 5"。
檢查落子：系統會檢查輸入的位置是否合法，包括是否在棋盤範圍內，該位置是否已被佔用等。
更新棋盤：如果落子合法，系統將更新棋盤並顯示新狀態；如果不合法，系統會提示玩家重新輸入。
勝利條件：系統自動檢查是否有五個連續相同顏色的棋子（橫、縱或斜），若有，則該玩家獲勝。
遊戲連結： https://github.com/otakuyoyo/gomoku/blob/main/gomoku.html&lt;/p&gt;</content><category term="期末專案1"></category><category term="期末專案網誌編寫"></category></entry></feed>