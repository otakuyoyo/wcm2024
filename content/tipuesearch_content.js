var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁: \xa0 https://otakuyoyo.github.io/wcm2024/ \n 網誌:  https://otakuyoyo.github.io/wcm2024/blog \n 簡報:  https://otakuyoyo.github.io/wcm2024/reveal \n 倉儲: https://github.com/otakuyoyo/wcm2024 \n 本 cmsimde 網際內容管理系統的對應 Template 倉儲: \n https://github.com/mdecycu/cmsimde_site \n 此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改 \n 倉儲對應網站:  https://mde.tw/cmsimde_site \n', 'tags': '', 'url': 'About.html'}, {'title': 'week3', 'text': 'git 的新增、提交與推送指令: \n git add . git commit -m "說明字串" git push \n 使用 git add . 表示要認列所進行的全部改版內容, git commit -m 執行之前, 若在近端使用, 必須先行設定 git config, 將 home_ipv6 目錄下的 .gitconfig 中明確列出改版者的身分, 其中包括: \n git config --global user.name "提交者的 github 帳號名稱" \n git config --global user.email "提交者在 github 所登錄的 email address" \n 使用者也可以利用 git version 查詢目前所使用的 git 版本. \n git status 通常用來查核目前近端的改版狀況, 例如: 是否與遠端倉儲同步, 或者遠端倉儲已經有了新版本. \n 若遠端倉儲已經有新的版本, 則在 git push 之前, 必須設法取下遠端資料進行合併後, 才能再提交新的版本並推送到遠端. \n git pull = git fetch + git merge \n 由於要將各組員的 wcm2024 設定為各分組倉儲的子模組, 因此必須利用 git submodule add 以各組員的學號作為子目錄名稱, 利用下列指令, 將組員倉儲新增為分組倉儲的子模組: \n git submodule add 倉儲網址 子目錄 \n 若只要取下倉儲的主要內容, 可以使用下列指令: \n git clone 倉儲網址_協定.git 指定目錄與否 \n 若要取下帶有子模組的倉儲, 且可能該子模組還有設定其他子模組, 則必須要加上 --recurse-submodules: \n git clone --recurse-submodules 倉儲網址_協定.git 指定目錄與否 \n', 'tags': '', 'url': 'week3.html'}, {'title': 'week4', 'text': '', 'tags': '', 'url': 'week4.html'}, {'title': '有關建立網站', 'text': '這裡所謂的網站指的是 Web site, 也就是 WWW (World Wide Web) 伺服器 (Server)端的超文件 (Hypertext), 且此超文件包含 css 與 Javascript 資料, 用來定義使用者利用瀏覽器連線時所得到的資料內容. \n 網際內容管理的網際指的並非網際網路的 Internet, 而是指 Web-based, 也就是針對網頁瀏覽器檢視的內容加以管理, 而這些內容除了具備各種不同格式的文字外, 還包括靜態圖片與動態的影音多媒體. \n 因為希望所管理的網站內容, 從無到有的過程留下改版歷程, 因此使用分散式版次管理系統進行網頁的配置, 也就是利用 Github 所提供的 Pages 功能來建立網頁. \n 又因為直接編輯帶有各種標註符號的超文件過程較為繁瑣, 因此利用 Python 與 Javascript 編寫了一套網頁編輯系統, 也就是 cmsimde 套件, 可以在 Python 與特定模組的環境中啟動, 也就是所謂的動態編輯網站, 使用者在 cmsimde 網際管理系統中所編輯的超文件內容存入套件 config 目錄中的 content.htm, 並且利用此超文件中的 H1~H3 標註作為分頁界線, 將 content.htm 分割為具有三個階層的頁面內容, 用來展示使用者所建立的最終 Github Pages 靜態網頁內容, 此網頁資料儲存在 cmsimde 套件中的 content 目錄, 並將靜態的 css 與 Javascript 儲存在 cmsimde 套件中的 static 目錄中. \n cmsimde 套件有關動態與靜態網站的標題、啟動網址與埠號設定位於 init.py 程式檔案中, 若將 init.py 中的啟動網址設為外部 IP, 則此網際內容管理系統的編輯網站, 可直接連外. \n', 'tags': '', 'url': '有關建立網站.html'}, {'title': 'Replit 靜態網站檢視', 'text': '下載 \xa0 main2.txt \xa0 與 \xa0 static.txt , 其中包含 main2.py 與 static.py, 只要在 Shell 執行 python3 main2.py 就可以執行倉儲內的靜態網站檢視. 另一方面, 若要取消先前執行 python3 main2.py, 只需要在 Shell 頁面按下 ctrl + c, c 代表 cancle 也就是取消. 然後若要執行動態網站，可以在 Shell 執行 python3 main.py 或者使用 Replit 的 Run 按鍵. \n', 'tags': '', 'url': 'Replit 靜態網站檢視.html'}, {'title': 'Replit 建立分組倉儲權限', 'text': '由於 Replit 上的免費帳號僅允許與一個 Github 帳號對應, 因此若將分組網站 import 到 Replit, 必須自行在 /home/runner/.ssh 目錄下建立 id_rsa 與 config (id_rsa.pub 必須登錄到 Github 對應帳號), 其中的 config 內容為: \n Host github.com\nUser git\nHostname github.com\n \n 而 Host 的設定與 Windows putty 中的 session 名稱相同, 配合使用的 ssh 連線指令將會是: \n git clone --recurse-submodules git@github.com:mdewcm2024/分組倉儲名稱.git \n 當使用者完成 /home/runner/.ssh 目錄中的 id_rsa 與 config 建立後, Replit 會定期刪除免費用戶的 .ssh 目錄, 因此使用者必須將此兩個檔案存至隨身碟, 並在需要對分組倉儲改版時, 啟動分組倉儲的動態網站, 將隨身碟中的 id_rsa 與 config 檔案, upload 到分組倉儲的 downloads 目錄後, 再利用 ssh.py 的執行, 將 id_rsa 與 config 移動到 /home/runner/.ssh 目錄中. 也就是執行: \n python3 ssh.py \n ssh.py 程式內容如下: \n import os\nif not os.path.exists("/home/runner/.ssh"): \n    os.makedirs("/home/runner/.ssh") \nos.system("mv ./downloads/id_rsa.txt /home/runner/.ssh/id_rsa")\nos.system("mv ./downloads/config.txt /home/runner/.ssh/config")\nos.system("chmod og-rwx /home/runner/.ssh/id_rsa") \n', 'tags': '', 'url': 'Replit 建立分組倉儲權限.html'}, {'title': '遊戲', 'text': '', 'tags': '', 'url': '遊戲.html'}, {'title': '塔羅牌', 'text': '首先，確保您有一組塔羅牌的圖像文件，把它們儲存在一個名為「tarot_cards」的資料夾中。 \n pip install Pillow \n 接下來，您可以使用以下Python代碼來創建一個簡單的塔羅牌應用程序 \n import os\nimport random\nfrom PIL import Image\n\n# 塔羅牌圖像文件夾\nTAROT_FOLDER = "tarot_cards"\n\n# 獲取所有塔羅牌圖像的文件名\ntarot_cards = os.listdir(TAROT_FOLDER)\n\n# 隨機選擇一張塔羅牌\nselected_card = random.choice(tarot_cards)\n\n# 打印所選塔羅牌的名稱\nprint("你的塔羅牌是：" + selected_card)\n\n# 顯示所選塔羅牌的圖像\nimage_path = os.path.join(TAROT_FOLDER, selected_card)\nimage = Image.open(image_path)\nimage.show() \n 這個代碼將隨機選擇一張塔羅牌，並顯示其圖像。請確保您有一個名為"tarot_cards"的文件夾，其中包含塔羅牌圖像。這個示例僅供參考，您可以根據需要進一步擴展和自定義這個塔羅牌應用程序。 \n', 'tags': '', 'url': '塔羅牌.html'}, {'title': '德州撲克', 'text': 'import random\n\n# 定義撲克牌的花色和點數\nsuits = [\'Hearts\', \'Diamonds\', \'Clubs\', \'Spades\']\nranks = [\'Two\', \'Three\', \'Four\', \'Five\', \'Six\', \'Seven\', \'Eight\', \'Nine\', \'Ten\', \'Jack\', \'Queen\', \'King\', \'Ace\']\n\n# 初始化一副撲克牌\ndeck = [{\'rank\': rank, \'suit\': suit} for rank in ranks for suit in suits]\n\n# 洗牌\nrandom.shuffle(deck)\n\n# 發兩張牌給玩家和莊家\nplayer_hand = [deck.pop(), deck.pop()]\ndealer_hand = [deck.pop(), deck.pop()]\n\n# 顯示玩家的牌和一張莊家的牌\nprint(f\'玩家的牌: {player_hand[0]["rank"]} of {player_hand[0]["suit"]} 和 {player_hand[1]["rank"]} of {player_hand[1]["suit"]}\')\nprint(f\'莊家的牌: {dealer_hand[0]["rank"]} of {dealer_hand[0]["suit"]} 和 一張未知牌\')\n\n# 檢查是否有玩家或莊家已經有21點（Blackjack）\ndef blackjack(hand):\n    values = [card_value(card) for card in hand]\n    return sum(values) == 21\n\n# 計算牌的點數\ndef card_value(card):\n    if card[\'rank\'] in [\'Jack\', \'Queen\', \'King\']:\n        return 10\n    elif card[\'rank\'] == \'Ace\':\n        return 11\n    else:\n        return int(card[\'rank\'])\n\n# 主遊戲迴圈\nwhile True:\n    # 檢查是否有玩家或莊家已經有21點\n    if blackjack(player_hand) or blackjack(dealer_hand):\n        break\n\n    # 玩家選擇要加牌還是停止\n    action = input(\'要加牌嗎？（加牌/停止）: \')\n    if action.lower() == \'加牌\':\n        player_hand.append(deck.pop())\n        print(f\'你的牌: {", ".join([card["rank"] + " of " + card["suit"] for card in player_hand])}\')\n    else:\n        break\n\n# 莊家加牌直到達到17點或更高\nwhile sum([card_value(card) for card in dealer_hand]) < 17:\n    dealer_hand.append(deck.pop())\n\n# 顯示最終結果\nprint(f\'你的牌: {", ".join([card["rank"] + " of " + card["suit"] for card in player_hand])}\')\nprint(f\'你的點數: {sum([card_value(card) for card in player_hand])}\')\nprint(f\'莊家的牌: {", ".join([card["rank"] + " of " + card["suit"] for card in dealer_hand])}\')\nprint(f\'莊家的點數: {sum([card_value(card) for card in dealer_hand])}\')\n\n# 判斷贏家\nif sum([card_value(card) for card in player_hand]) > 21:\n    print(\'你爆牌了，莊家贏了！\')\nelif sum([card_value(card) for card in dealer_hand]) > 21:\n    print(\'莊家爆牌了，你贏了！\')\nelif sum([card_value(card) for card in player_hand]) > sum([card_value(card) for card in dealer_hand]):\n    print(\'你贏了！\')\nelif sum([card_value(card) for card in player_hand]) < sum([card_value(card) for card in dealer_hand]):\n    print(\'莊家贏了！\')\nelse:\n    print(\'平局！\')\n \n 在執行上面的代碼後，你將開始一個簡單的德州撲克遊戲。遊戲的進行方式如下： \n \n \n 執行代碼：在你的 Python 開發環境中運行上面提供的代碼。這樣你就會看到一副洗好的撲克牌和玩家、莊家的初始牌。 \n \n \n 玩家回合：遊戲將提示你進行選擇。你可以輸入"加牌"以繼續要求加牌，或者輸入"停止"以結束你的回合。 \n \n \n 莊家回合：當你選擇"停止"或者當你的牌總和達到21點時，莊家將開始自己的回合，自動加牌直到達到17點或更高。 \n \n \n 結算：遊戲將計算玩家和莊家的點數，並確定勝利者。結果將被輸出到屏幕上，以宣布遊戲的結果。 \n \n \n', 'tags': '', 'url': '德州撲克.html'}, {'title': '西洋棋', 'text': 'def create_board():\n    board = [\n        [\'r\', \'n\', \'b\', \'q\', \'k\', \'b\', \'n\', \'r\'],\n        [\'p\', \'p\', \'p\', \'p\', \'p\', \'p\', \'p\', \'p\'],\n        [\' \', \' \', \' \', \' \', \' \', \' \', \' \', \' \'],\n        [\' \', \' \', \' \', \' \', \' \', \' \', \' \', \' \'],\n        [\' \', \' \', \' \', \' \', \' \', \' \', \' \', \' \'],\n        [\' \', \' \', \' \', \' \', \' \', \' \', \' \', \' \'],\n        [\'P\', \'P\', \'P\', \'P\', \'P\', \'P\', \'P\', \'P\'],\n        [\'R\', \'N\', \'B\', \'Q\', \'K\', \'B\', \'N\', \'R\']\n    ]\n    return board\n\ndef print_board(board):\n    def colored_piece(piece):\n        if piece.islower():\n            return f"\\033[94m{piece.upper()}\\033[0m"  # Dark blue for black pieces\n        elif piece.isupper():\n            return f"\\033[96m{piece}\\033[0m"  # Cyan for white pieces\n        return piece\n\n    print("  a b c d e f g h")\n    for i, row in enumerate(board):\n        print(8 - i, " ".join(colored_piece(cell) for cell in row))\n\ndef is_valid_move(board, start, end, player, en_passant):\n    start_row, start_col = start\n    end_row, end_col = end\n    piece = board[start_row][start_col]\n\n    if player == \'White\' and piece.islower():\n        return False\n    if player == \'Black\' and piece.isupper():\n        return False\n\n    if piece.lower() == \'p\':\n        return is_valid_move_pawn(board, start, end, en_passant)\n    elif piece.lower() == \'r\':\n        return is_valid_move_rook(board, start, end)\n    elif piece.lower() == \'n\':\n        return is_valid_move_knight(board, start, end)\n    elif piece.lower() == \'b\':\n        return is_valid_move_bishop(board, start, end)\n    elif piece.lower() == \'q\':\n        return is_valid_move_queen(board, start, end)\n    elif piece.lower() == \'k\':\n        return is_valid_move_king(board, start, end)\n    return False\n\ndef is_valid_move_pawn(board, start, end, en_passant):\n    start_row, start_col = start\n    end_row, end_col = end\n    piece = board[start_row][start_col]\n\n    direction = -1 if piece.isupper() else 1\n    start_row_base = 6 if piece.isupper() else 1\n\n    if board[end_row][end_col] == \' \':\n        if start_col == end_col:\n            if end_row == start_row + direction:\n                return True\n            if start_row == start_row_base and end_row == start_row + 2 * direction and board[start_row + direction][start_col] == \' \':\n                return True\n        if (start_row, start_col) == en_passant and end_row == start_row + direction and abs(start_col - end_col) == 1:\n            return True\n    else:\n        if abs(start_col - end_col) == 1 and end_row == start_row + direction:\n            return True\n\n    return False\n\ndef is_valid_move_rook(board, start, end):\n    start_row, start_col = start\n    end_row, end_col = end\n    if start_row != end_row and start_col != end_col:\n        return False\n    step_row = (end_row - start_row) // max(1, abs(end_row - start_row)) if start_row != end_row else 0\n    step_col = (end_col - start_col) // max(1, abs(end_col - start_col)) if start_col != end_col else 0\n    for i in range(1, max(abs(end_row - start_row), abs(end_col - start_col))):\n        if board[start_row + i * step_row][start_col + i * step_col] != \' \':\n            return False\n    return True\n\ndef is_valid_move_knight(board, start, end):\n    start_row, start_col = start\n    end_row, end_col = end\n    return (abs(start_row - end_row), abs(start_col - end_col)) in [(1, 2), (2, 1)]\n\ndef is_valid_move_bishop(board, start, end):\n    start_row, start_col = start\n    end_row, end_col = end\n    if abs(start_row - end_row) != abs(start_col - end_col):\n        return False\n    step_row = (end_row - start_row) // abs(end_row - start_row)\n    step_col = (end_col - start_col) // abs(end_col - start_col)\n    for i in range(1, abs(end_row - start_row)):\n        if board[start_row + i * step_row][start_col + i * step_col] != \' \':\n            return False\n    return True\n\ndef is_valid_move_queen(board, start, end):\n    return is_valid_move_rook(board, start, end) or is_valid_move_bishop(board, start, end)\n\ndef is_valid_move_king(board, start, end):\n    start_row, start_col = start\n    end_row, end_col = end\n    return max(abs(start_row - end_row), abs(start_col - end_col)) == 1\n\ndef move_piece(board, start, end, player, en_passant):\n    if not is_valid_move(board, start, end, player, en_passant):\n        print("无效的移动!")\n        return en_passant\n    start_row, start_col = start\n    end_row, end_col = end\n\n    # 处理过路兵\n    if board[start_row][start_col].lower() == \'p\' and (start_row, start_col) == en_passant and abs(start_col - end_col) == 1:\n        if player == \'White\':\n            board[end_row + 1][end_col] = \' \'\n        else:\n            board[end_row - 1][end_col] = \' \'\n\n    board[end_row][end_col] = board[start_row][start_col]\n    board[start_row][start_col] = \' \'\n\n    # 处理升变\n    if board[end_row][end_col].lower() == \'p\':\n        if (player == \'White\' and end_row == 0) or (player == \'Black\' and end_row == 7):\n            while True:\n                promotion = input("选择升变的棋子 (Q/R/B/N): ").upper()\n                if promotion in \'QRBN\':\n                    board[end_row][end_col] = promotion if player == \'White\' else promotion.lower()\n                    break\n\n    # 返回新的过路兵位置\n    if board[end_row][end_col].lower() == \'p\' and abs(start_row - end_row) == 2:\n        return (end_row, end_col)\n\n    return None\n\ndef parse_position(position):\n    if len(position) != 2:\n        raise ValueError("位置格式不正确，请输入类似 \'e2\' 的格式。")\n    col, row = position\n    if col not in "abcdefgh" or row not in "12345678":\n        raise ValueError("位置格式不正确，请输入类似 \'e2\' 的格式。")\n    col = ord(col) - ord("a")\n    row = 8 - int(row)\n    return (row, col)\n\ndef game_instructions():\n    print("欢迎来到西洋棋游戏!")\n    print("游戏规则说明:")\n    print("1. 两位玩家轮流进行游戏，白方先行。")\n    print("2. 使用棋盘上的位置来移动棋子，例如 \'e2\' 移动到 \'e4\'。")\n    print("3. 黑色棋子为深蓝色，白色棋子为水蓝色。")\n    print("4. 特殊规则：兵的升变、过路兵、易位、将军、将死等。")\n    print("请享受游戏!\\n")\n\ndef play_chess():\n    game_instructions()\n    board = create_board()\n    current_player = "White"\n    en_passant = None\n\n    while True:\n        print_board(board)\n        print(f"{current_player} 的回合")\n        while True:\n            try:\n                start = input("输入起始位置 (例如 e2): ")\n                start_pos = parse_position(start)\n                break\n            except ValueError as e:\n                print(e)\n\n        while True:\n            try:\n                end = input("输入结束位置 (例如 e4): ")\n                end_pos = parse_position(end)\n                break\n            except ValueError as e:\n                print(e)\n\n        en_passant = move_piece(board, start_pos, end_pos, current_player, en_passant)\n        current_player = "Black" if current_player == "White" else "White"\n        if input("是否结束游戏？ (y/n): ").lower() == "y":\n            break\n\nif __name__ == "__main__":\n    play_chess()\n \n 這是一款文字版的西洋棋遊戲，具有以下特點： \n \n 雙人遊戲 ：兩位玩家輪流操作，白方先行。 \n 文字介面 ：玩家輸入棋子位置來移動棋子。 \n 棋盤顯示 ：棋盤以表格形式顯示，黑方棋子為深藍色，白方棋子為水藍色。 \n 特殊規則 ：包括兵的升變、過路兵、易位、將軍和將死等規則。 \n \n 遊戲說明: \n \n 玩家輸入起始和結束位置來移動棋子，例如 "e2 e4"。 \n 系統檢查移動是否合法，合法則更新棋盤，不合法則提示重新輸入。 \n 特殊移動如兵的升變和易位會自動處理。 \n 隨時輸入 "y" 結束遊戲。 \n \n', 'tags': '', 'url': '西洋棋.html'}, {'title': '五子棋', 'text': 'def initialize_board(size=15):\n    return [[\' \' for _ in range(size)] for _ in range(size)]\n\ndef colored_piece(piece):\n    if piece == \'X\':\n        return f"\\033[91m{piece}\\033[0m"  # Red\n    elif piece == \'O\':\n        return f"\\033[92m{piece}\\033[0m"  # Green\n    return piece\n\ndef print_board(board):\n    size = len(board)\n    # Print the top column numbers\n    print("    " + " ".join(f"{i+1:2}" for i in range(size)))\n    print("  +" + "---+" * size)\n    for idx, row in enumerate(board):\n        print(f"{idx+1:2} | " + " | ".join(colored_piece(cell) for cell in row) + " |")\n        print("  +" + "---+" * size)\n\ndef check_winner(board, player):\n    size = len(board)\n    # Check horizontal, vertical, and diagonal lines\n    for row in range(size):\n        for col in range(size):\n            if board[row][col] == player:\n                # Check horizontal\n                if col + 4 < size and all(board[row][col+i] == player for i in range(5)):\n                    return True\n                # Check vertical\n                if row + 4 < size and all(board[row+i][col] == player for i in range(5)):\n                    return True\n                # Check diagonal (down-right)\n                if row + 4 < size and col + 4 < size and all(board[row+i][col+i] == player for i in range(5)):\n                    return True\n                # Check diagonal (down-left)\n                if row + 4 < size and col - 4 >= 0 and all(board[row+i][col-i] == player for i in range(5)):\n                    return True\n    return False\n\ndef play_game():\n    board = initialize_board()\n    print("歡迎來到五子棋遊戲！")\n    print("玩家1: 黑子 (X) \\033[91m紅色\\033[0m")\n    print("玩家2: 白子 (O) \\033[92m綠色\\033[0m")\n    current_player = \'X\'  # X starts the game, representing black stones\n    while True:\n        print_board(board)\n        print(f"玩家 {current_player} 的回合")\n        try:\n            row = int(input("請輸入行 (1-15): ")) - 1\n            col = int(input("請輸入列 (1-15): ")) - 1\n            if 0 <= row < len(board) and 0 <= col < len(board[0]) and board[row][col] == \' \':\n                board[row][col] = current_player\n                if check_winner(board, current_player):\n                    print_board(board)\n                    print(f"玩家 {current_player} 獲勝！")\n                    break\n                current_player = \'O\' if current_player == \'X\' else \'X\'\n            else:\n                print("無效的移動，請重試。")\n        except ValueError:\n            print("請輸入有效的數字。")\n\nif __name__ == "__main__":\n    play_game()\n \n 這是一款文字版的五子棋遊戲，旨在提供玩家一個簡單且有趣的方式來享受五子棋的樂趣。以下是這款五子棋遊戲的主要特點和玩法說明： \n 遊戲特點 \n \n 雙人遊戲 ：兩位玩家輪流下棋，輪流放置黑子（X）和白子（O）。 \n 文字介面 ：玩家需要輸入棋子的位置來進行落子。 \n 棋盤顯示 ：棋盤以表格形式顯示，每個位置用數字標示，方便玩家輸入。 \n 簡單易用 ：遊戲規則簡單，適合所有年齡段的玩家。 \n \n 遊戲玩法說明 \n \n 遊戲開始 ：啟動遊戲後，系統會顯示初始空棋盤，並提示黑方玩家進行落子。 \n 輸入落子位置 ：玩家需要輸入棋子的行和列，例如在第4行第5列落子，輸入格式為 "4 5"。 \n 檢查落子 ：系統會檢查輸入的位置是否合法，包括是否在棋盤範圍內，該位置是否已被佔用等。 \n 更新棋盤 ：如果落子合法，系統將更新棋盤並顯示新狀態；如果不合法，系統會提示玩家重新輸入。 \n 勝利條件 ：系統自動檢查是否有五個連續相同顏色的棋子（橫、縱或斜），若有，則該玩家獲勝。 \n \n 遊戲連結:\xa0 https://github.com/otakuyoyo/gomoku/blob/main/gomoku.html \n \n', 'tags': '', 'url': '五子棋.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};