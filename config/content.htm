<h1>About</h1>
<p>網頁:<span> </span><a class="Link--inTextBlock" href="https://otakuyoyo.github.io/wcm2024/">https://otakuyoyo.github.io/wcm2024/</a></p>
<p>網誌:<a href="https://otakuyoyo.github.io/wcm2024/blog"> https://otakuyoyo.github.io/wcm2024/blog</a></p>
<p>簡報:<a href="https://otakuyoyo.github.io/wcm2024/reveal"> https://otakuyoyo.github.io/wcm2024/reveal</a></p>
<p>倉儲:<a href="https://github.com/otakuyoyo/wcm2024">https://github.com/otakuyoyo/wcm2024</a></p>
<p>本 cmsimde 網際內容管理系統的對應 Template 倉儲:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a></p>
<p style="padding-left: 30px;">此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改</p>
<p style="padding-left: 30px;">倉儲對應網站: <a href="https://mde.tw/cmsimde_site">https://mde.tw/cmsimde_site</a></p>
<h1>week3</h1>
<p>git 的新增、提交與推送指令:</p>
<p>git add . git commit -m "說明字串" git push</p>
<p>使用 git add . 表示要認列所進行的全部改版內容, git commit -m 執行之前, 若在近端使用, 必須先行設定 git config, 將 home_ipv6 目錄下的 .gitconfig 中明確列出改版者的身分, 其中包括:</p>
<p>git config --global user.name "提交者的 github 帳號名稱"</p>
<p>git config --global user.email "提交者在 github 所登錄的 email address"</p>
<p>使用者也可以利用 git version 查詢目前所使用的 git 版本.</p>
<p>git status 通常用來查核目前近端的改版狀況, 例如: 是否與遠端倉儲同步, 或者遠端倉儲已經有了新版本.</p>
<p>若遠端倉儲已經有新的版本, 則在 git push 之前, 必須設法取下遠端資料進行合併後, 才能再提交新的版本並推送到遠端.</p>
<p>git pull = git fetch + git merge</p>
<p>由於要將各組員的 wcm2024 設定為各分組倉儲的子模組, 因此必須利用 git submodule add 以各組員的學號作為子目錄名稱, 利用下列指令, 將組員倉儲新增為分組倉儲的子模組:</p>
<p>git submodule add 倉儲網址 子目錄</p>
<p>若只要取下倉儲的主要內容, 可以使用下列指令:</p>
<p>git clone 倉儲網址_協定.git 指定目錄與否</p>
<p>若要取下帶有子模組的倉儲, 且可能該子模組還有設定其他子模組, 則必須要加上 --recurse-submodules:</p>
<p>git clone --recurse-submodules 倉儲網址_協定.git 指定目錄與否</p>
<h1>week4</h1>
<h2>有關建立網站</h2>
<p>這裡所謂的網站指的是 Web site, 也就是 WWW (World Wide Web) 伺服器 (Server)端的超文件 (Hypertext), 且此超文件包含 css 與 Javascript 資料, 用來定義使用者利用瀏覽器連線時所得到的資料內容.</p>
<p>網際內容管理的網際指的並非網際網路的 Internet, 而是指 Web-based, 也就是針對網頁瀏覽器檢視的內容加以管理, 而這些內容除了具備各種不同格式的文字外, 還包括靜態圖片與動態的影音多媒體.</p>
<p>因為希望所管理的網站內容, 從無到有的過程留下改版歷程, 因此使用分散式版次管理系統進行網頁的配置, 也就是利用 Github 所提供的 Pages 功能來建立網頁.</p>
<p>又因為直接編輯帶有各種標註符號的超文件過程較為繁瑣, 因此利用 Python 與 Javascript 編寫了一套網頁編輯系統, 也就是 cmsimde 套件, 可以在 Python 與特定模組的環境中啟動, 也就是所謂的動態編輯網站, 使用者在 cmsimde 網際管理系統中所編輯的超文件內容存入套件 config 目錄中的 content.htm, 並且利用此超文件中的 H1~H3 標註作為分頁界線, 將 content.htm 分割為具有三個階層的頁面內容, 用來展示使用者所建立的最終 Github Pages 靜態網頁內容, 此網頁資料儲存在 cmsimde 套件中的 content 目錄, 並將靜態的 css 與 Javascript 儲存在 cmsimde 套件中的 static 目錄中.</p>
<p>cmsimde 套件有關動態與靜態網站的標題、啟動網址與埠號設定位於 init.py 程式檔案中, 若將 init.py 中的啟動網址設為外部 IP, 則此網際內容管理系統的編輯網站, 可直接連外.</p>
<h2>Replit 靜態網站檢視</h2>
<p>下載<span> </span><a href="https://mde.tw/wcm2024/downloads/main2.txt">main2.txt</a><span> </span>與<span> </span><a href="https://mde.tw/wcm2024/downloads/static.txt">static.txt</a>, 其中包含 main2.py 與 static.py, 只要在 Shell 執行 python3 main2.py 就可以執行倉儲內的靜態網站檢視. 另一方面, 若要取消先前執行 python3 main2.py, 只需要在 Shell 頁面按下 ctrl + c, c 代表 cancle 也就是取消. 然後若要執行動態網站，可以在 Shell 執行 python3 main.py 或者使用 Replit 的 Run 按鍵.</p>
<h2>Replit 建立分組倉儲權限</h2>
<p>由於 Replit 上的免費帳號僅允許與一個 Github 帳號對應, 因此若將分組網站 import 到 Replit, 必須自行在 /home/runner/.ssh 目錄下建立 id_rsa 與 config (id_rsa.pub 必須登錄到 Github 對應帳號), 其中的 config 內容為:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">Host github.com
User git
Hostname github.com
</pre>
<p>而 Host 的設定與 Windows putty 中的 session 名稱相同, 配合使用的 ssh 連線指令將會是:</p>
<p>git clone --recurse-submodules git@github.com:mdewcm2024/分組倉儲名稱.git</p>
<p>當使用者完成 /home/runner/.ssh 目錄中的 id_rsa 與 config 建立後, Replit 會定期刪除免費用戶的 .ssh 目錄, 因此使用者必須將此兩個檔案存至隨身碟, 並在需要對分組倉儲改版時, 啟動分組倉儲的動態網站, 將隨身碟中的 id_rsa 與 config 檔案, upload 到分組倉儲的 downloads 目錄後, 再利用 ssh.py 的執行, 將 id_rsa 與 config 移動到 /home/runner/.ssh 目錄中. 也就是執行:</p>
<p>python3 ssh.py</p>
<p>ssh.py 程式內容如下:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">import os
if not os.path.exists("/home/runner/.ssh"): 
    os.makedirs("/home/runner/.ssh") 
os.system("mv ./downloads/id_rsa.txt /home/runner/.ssh/id_rsa")
os.system("mv ./downloads/config.txt /home/runner/.ssh/config")
os.system("chmod og-rwx /home/runner/.ssh/id_rsa")</pre>
<h1>遊戲</h1>
<h3><strong>塔羅牌</strong></h3>
<p><span style="vertical-align: inherit;">首先，確保您有一組塔羅牌的圖像文件，把它們儲存在一個名為「tarot_cards」的資料夾中。</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">pip install Pillow</pre>
<p>接下來，您可以使用以下Python代碼來創建一個簡單的塔羅牌應用程序</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os
import random
from PIL import Image

# 塔羅牌圖像文件夾
TAROT_FOLDER = "tarot_cards"

# 獲取所有塔羅牌圖像的文件名
tarot_cards = os.listdir(TAROT_FOLDER)

# 隨機選擇一張塔羅牌
selected_card = random.choice(tarot_cards)

# 打印所選塔羅牌的名稱
print("你的塔羅牌是：" + selected_card)

# 顯示所選塔羅牌的圖像
image_path = os.path.join(TAROT_FOLDER, selected_card)
image = Image.open(image_path)
image.show()</pre>
<p>這個代碼將隨機選擇一張塔羅牌，並顯示其圖像。請確保您有一個名為"tarot_cards"的文件夾，其中包含塔羅牌圖像。這個示例僅供參考，您可以根據需要進一步擴展和自定義這個塔羅牌應用程序。</p>
<h3>德州撲克</h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">import random

# 定義撲克牌的花色和點數
suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
ranks = ['Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace']

# 初始化一副撲克牌
deck = [{'rank': rank, 'suit': suit} for rank in ranks for suit in suits]

# 洗牌
random.shuffle(deck)

# 發兩張牌給玩家和莊家
player_hand = [deck.pop(), deck.pop()]
dealer_hand = [deck.pop(), deck.pop()]

# 顯示玩家的牌和一張莊家的牌
print(f'玩家的牌: {player_hand[0]["rank"]} of {player_hand[0]["suit"]} 和 {player_hand[1]["rank"]} of {player_hand[1]["suit"]}')
print(f'莊家的牌: {dealer_hand[0]["rank"]} of {dealer_hand[0]["suit"]} 和 一張未知牌')

# 檢查是否有玩家或莊家已經有21點（Blackjack）
def blackjack(hand):
    values = [card_value(card) for card in hand]
    return sum(values) == 21

# 計算牌的點數
def card_value(card):
    if card['rank'] in ['Jack', 'Queen', 'King']:
        return 10
    elif card['rank'] == 'Ace':
        return 11
    else:
        return int(card['rank'])

# 主遊戲迴圈
while True:
    # 檢查是否有玩家或莊家已經有21點
    if blackjack(player_hand) or blackjack(dealer_hand):
        break

    # 玩家選擇要加牌還是停止
    action = input('要加牌嗎？（加牌/停止）: ')
    if action.lower() == '加牌':
        player_hand.append(deck.pop())
        print(f'你的牌: {", ".join([card["rank"] + " of " + card["suit"] for card in player_hand])}')
    else:
        break

# 莊家加牌直到達到17點或更高
while sum([card_value(card) for card in dealer_hand]) &lt; 17:
    dealer_hand.append(deck.pop())

# 顯示最終結果
print(f'你的牌: {", ".join([card["rank"] + " of " + card["suit"] for card in player_hand])}')
print(f'你的點數: {sum([card_value(card) for card in player_hand])}')
print(f'莊家的牌: {", ".join([card["rank"] + " of " + card["suit"] for card in dealer_hand])}')
print(f'莊家的點數: {sum([card_value(card) for card in dealer_hand])}')

# 判斷贏家
if sum([card_value(card) for card in player_hand]) &gt; 21:
    print('你爆牌了，莊家贏了！')
elif sum([card_value(card) for card in dealer_hand]) &gt; 21:
    print('莊家爆牌了，你贏了！')
elif sum([card_value(card) for card in player_hand]) &gt; sum([card_value(card) for card in dealer_hand]):
    print('你贏了！')
elif sum([card_value(card) for card in player_hand]) &lt; sum([card_value(card) for card in dealer_hand]):
    print('莊家贏了！')
else:
    print('平局！')
</pre>
<p>在執行上面的代碼後，你將開始一個簡單的德州撲克遊戲。遊戲的進行方式如下：</p>
<ol>
<li>
<p>執行代碼：在你的 Python 開發環境中運行上面提供的代碼。這樣你就會看到一副洗好的撲克牌和玩家、莊家的初始牌。</p>
</li>
<li>
<p>玩家回合：遊戲將提示你進行選擇。你可以輸入"加牌"以繼續要求加牌，或者輸入"停止"以結束你的回合。</p>
</li>
<li>
<p>莊家回合：當你選擇"停止"或者當你的牌總和達到21點時，莊家將開始自己的回合，自動加牌直到達到17點或更高。</p>
</li>
<li>
<p>結算：遊戲將計算玩家和莊家的點數，並確定勝利者。結果將被輸出到屏幕上，以宣布遊戲的結果。</p>
</li>
</ol>
<h3><strong>西洋棋</strong></h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def create_board():
    board = [
        ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],
        ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
        ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
        ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']
    ]
    return board

def print_board(board):
    def colored_piece(piece):
        if piece.islower():
            return f"\033[94m{piece.upper()}\033[0m"  # Dark blue for black pieces
        elif piece.isupper():
            return f"\033[96m{piece}\033[0m"  # Cyan for white pieces
        return piece

    print("  a b c d e f g h")
    for i, row in enumerate(board):
        print(8 - i, " ".join(colored_piece(cell) for cell in row))

def is_valid_move(board, start, end, player, en_passant):
    start_row, start_col = start
    end_row, end_col = end
    piece = board[start_row][start_col]

    if player == 'White' and piece.islower():
        return False
    if player == 'Black' and piece.isupper():
        return False

    if piece.lower() == 'p':
        return is_valid_move_pawn(board, start, end, en_passant)
    elif piece.lower() == 'r':
        return is_valid_move_rook(board, start, end)
    elif piece.lower() == 'n':
        return is_valid_move_knight(board, start, end)
    elif piece.lower() == 'b':
        return is_valid_move_bishop(board, start, end)
    elif piece.lower() == 'q':
        return is_valid_move_queen(board, start, end)
    elif piece.lower() == 'k':
        return is_valid_move_king(board, start, end)
    return False

def is_valid_move_pawn(board, start, end, en_passant):
    start_row, start_col = start
    end_row, end_col = end
    piece = board[start_row][start_col]

    direction = -1 if piece.isupper() else 1
    start_row_base = 6 if piece.isupper() else 1

    if board[end_row][end_col] == ' ':
        if start_col == end_col:
            if end_row == start_row + direction:
                return True
            if start_row == start_row_base and end_row == start_row + 2 * direction and board[start_row + direction][start_col] == ' ':
                return True
        if (start_row, start_col) == en_passant and end_row == start_row + direction and abs(start_col - end_col) == 1:
            return True
    else:
        if abs(start_col - end_col) == 1 and end_row == start_row + direction:
            return True

    return False

def is_valid_move_rook(board, start, end):
    start_row, start_col = start
    end_row, end_col = end
    if start_row != end_row and start_col != end_col:
        return False
    step_row = (end_row - start_row) // max(1, abs(end_row - start_row)) if start_row != end_row else 0
    step_col = (end_col - start_col) // max(1, abs(end_col - start_col)) if start_col != end_col else 0
    for i in range(1, max(abs(end_row - start_row), abs(end_col - start_col))):
        if board[start_row + i * step_row][start_col + i * step_col] != ' ':
            return False
    return True

def is_valid_move_knight(board, start, end):
    start_row, start_col = start
    end_row, end_col = end
    return (abs(start_row - end_row), abs(start_col - end_col)) in [(1, 2), (2, 1)]

def is_valid_move_bishop(board, start, end):
    start_row, start_col = start
    end_row, end_col = end
    if abs(start_row - end_row) != abs(start_col - end_col):
        return False
    step_row = (end_row - start_row) // abs(end_row - start_row)
    step_col = (end_col - start_col) // abs(end_col - start_col)
    for i in range(1, abs(end_row - start_row)):
        if board[start_row + i * step_row][start_col + i * step_col] != ' ':
            return False
    return True

def is_valid_move_queen(board, start, end):
    return is_valid_move_rook(board, start, end) or is_valid_move_bishop(board, start, end)

def is_valid_move_king(board, start, end):
    start_row, start_col = start
    end_row, end_col = end
    return max(abs(start_row - end_row), abs(start_col - end_col)) == 1

def move_piece(board, start, end, player, en_passant):
    if not is_valid_move(board, start, end, player, en_passant):
        print("无效的移动!")
        return en_passant
    start_row, start_col = start
    end_row, end_col = end

    # 处理过路兵
    if board[start_row][start_col].lower() == 'p' and (start_row, start_col) == en_passant and abs(start_col - end_col) == 1:
        if player == 'White':
            board[end_row + 1][end_col] = ' '
        else:
            board[end_row - 1][end_col] = ' '

    board[end_row][end_col] = board[start_row][start_col]
    board[start_row][start_col] = ' '

    # 处理升变
    if board[end_row][end_col].lower() == 'p':
        if (player == 'White' and end_row == 0) or (player == 'Black' and end_row == 7):
            while True:
                promotion = input("选择升变的棋子 (Q/R/B/N): ").upper()
                if promotion in 'QRBN':
                    board[end_row][end_col] = promotion if player == 'White' else promotion.lower()
                    break

    # 返回新的过路兵位置
    if board[end_row][end_col].lower() == 'p' and abs(start_row - end_row) == 2:
        return (end_row, end_col)

    return None

def parse_position(position):
    if len(position) != 2:
        raise ValueError("位置格式不正确，请输入类似 'e2' 的格式。")
    col, row = position
    if col not in "abcdefgh" or row not in "12345678":
        raise ValueError("位置格式不正确，请输入类似 'e2' 的格式。")
    col = ord(col) - ord("a")
    row = 8 - int(row)
    return (row, col)

def game_instructions():
    print("欢迎来到西洋棋游戏!")
    print("游戏规则说明:")
    print("1. 两位玩家轮流进行游戏，白方先行。")
    print("2. 使用棋盘上的位置来移动棋子，例如 'e2' 移动到 'e4'。")
    print("3. 黑色棋子为深蓝色，白色棋子为水蓝色。")
    print("4. 特殊规则：兵的升变、过路兵、易位、将军、将死等。")
    print("请享受游戏!\n")

def play_chess():
    game_instructions()
    board = create_board()
    current_player = "White"
    en_passant = None

    while True:
        print_board(board)
        print(f"{current_player} 的回合")
        while True:
            try:
                start = input("输入起始位置 (例如 e2): ")
                start_pos = parse_position(start)
                break
            except ValueError as e:
                print(e)

        while True:
            try:
                end = input("输入结束位置 (例如 e4): ")
                end_pos = parse_position(end)
                break
            except ValueError as e:
                print(e)

        en_passant = move_piece(board, start_pos, end_pos, current_player, en_passant)
        current_player = "Black" if current_player == "White" else "White"
        if input("是否结束游戏？ (y/n): ").lower() == "y":
            break

if __name__ == "__main__":
    play_chess()
</pre>
<p>這是一款文字版的西洋棋遊戲，具有以下特點：</p>
<ol>
<li><strong>雙人遊戲</strong>：兩位玩家輪流操作，白方先行。</li>
<li><strong>文字介面</strong>：玩家輸入棋子位置來移動棋子。</li>
<li><strong>棋盤顯示</strong>：棋盤以表格形式顯示，黑方棋子為深藍色，白方棋子為水藍色。</li>
<li><strong>特殊規則</strong>：包括兵的升變、過路兵、易位、將軍和將死等規則。</li>
</ol>
<p>遊戲說明:</p>
<ul>
<li>玩家輸入起始和結束位置來移動棋子，例如 "e2 e4"。</li>
<li>系統檢查移動是否合法，合法則更新棋盤，不合法則提示重新輸入。</li>
<li>特殊移動如兵的升變和易位會自動處理。</li>
<li>隨時輸入 "y" 結束遊戲。</li>
</ul>
<h3><strong>五子棋</strong></h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def initialize_board(size=15):
    return [[' ' for _ in range(size)] for _ in range(size)]

def colored_piece(piece):
    if piece == 'X':
        return f"\033[91m{piece}\033[0m"  # Red
    elif piece == 'O':
        return f"\033[92m{piece}\033[0m"  # Green
    return piece

def print_board(board):
    size = len(board)
    # Print the top column numbers
    print("    " + " ".join(f"{i+1:2}" for i in range(size)))
    print("  +" + "---+" * size)
    for idx, row in enumerate(board):
        print(f"{idx+1:2} | " + " | ".join(colored_piece(cell) for cell in row) + " |")
        print("  +" + "---+" * size)

def check_winner(board, player):
    size = len(board)
    # Check horizontal, vertical, and diagonal lines
    for row in range(size):
        for col in range(size):
            if board[row][col] == player:
                # Check horizontal
                if col + 4 &lt; size and all(board[row][col+i] == player for i in range(5)):
                    return True
                # Check vertical
                if row + 4 &lt; size and all(board[row+i][col] == player for i in range(5)):
                    return True
                # Check diagonal (down-right)
                if row + 4 &lt; size and col + 4 &lt; size and all(board[row+i][col+i] == player for i in range(5)):
                    return True
                # Check diagonal (down-left)
                if row + 4 &lt; size and col - 4 &gt;= 0 and all(board[row+i][col-i] == player for i in range(5)):
                    return True
    return False

def play_game():
    board = initialize_board()
    print("歡迎來到五子棋遊戲！")
    print("玩家1: 黑子 (X) \033[91m紅色\033[0m")
    print("玩家2: 白子 (O) \033[92m綠色\033[0m")
    current_player = 'X'  # X starts the game, representing black stones
    while True:
        print_board(board)
        print(f"玩家 {current_player} 的回合")
        try:
            row = int(input("請輸入行 (1-15): ")) - 1
            col = int(input("請輸入列 (1-15): ")) - 1
            if 0 &lt;= row &lt; len(board) and 0 &lt;= col &lt; len(board[0]) and board[row][col] == ' ':
                board[row][col] = current_player
                if check_winner(board, current_player):
                    print_board(board)
                    print(f"玩家 {current_player} 獲勝！")
                    break
                current_player = 'O' if current_player == 'X' else 'X'
            else:
                print("無效的移動，請重試。")
        except ValueError:
            print("請輸入有效的數字。")

if __name__ == "__main__":
    play_game()
</pre>
<p>這是一款文字版的五子棋遊戲，旨在提供玩家一個簡單且有趣的方式來享受五子棋的樂趣。以下是這款五子棋遊戲的主要特點和玩法說明：</p>
<p>遊戲特點</p>
<ol>
<li><strong>雙人遊戲</strong>：兩位玩家輪流下棋，輪流放置黑子（X）和白子（O）。</li>
<li><strong>文字介面</strong>：玩家需要輸入棋子的位置來進行落子。</li>
<li><strong>棋盤顯示</strong>：棋盤以表格形式顯示，每個位置用數字標示，方便玩家輸入。</li>
<li><strong>簡單易用</strong>：遊戲規則簡單，適合所有年齡段的玩家。</li>
</ol>
<p>遊戲玩法說明</p>
<ol>
<li><strong>遊戲開始</strong>：啟動遊戲後，系統會顯示初始空棋盤，並提示黑方玩家進行落子。</li>
<li><strong>輸入落子位置</strong>：玩家需要輸入棋子的行和列，例如在第4行第5列落子，輸入格式為 "4 5"。</li>
<li><strong>檢查落子</strong>：系統會檢查輸入的位置是否合法，包括是否在棋盤範圍內，該位置是否已被佔用等。</li>
<li><strong>更新棋盤</strong>：如果落子合法，系統將更新棋盤並顯示新狀態；如果不合法，系統會提示玩家重新輸入。</li>
<li><strong>勝利條件</strong>：系統自動檢查是否有五個連續相同顏色的棋子（橫、縱或斜），若有，則該玩家獲勝。</li>
</ol>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false"></pre>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>